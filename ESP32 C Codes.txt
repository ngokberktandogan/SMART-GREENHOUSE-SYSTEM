// Arduino Uno WiFi Dev Ed Library - Version: Latest 
//#include <UnoWiFiDevEd.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/16b07abb-8466-4376-bb14-110c0b0e33d0 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int cO2;
  int humidity;
  int temperature;
  bool fan;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "WiFi.h"
#include "LoRa.h"
#include "SPI.h"

#define ss 5
#define rst 14
#define dio0 16
int passwordCo2 = 5221;
int passwordTemp = 5223;
int passwordHum = 5225;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  initWiFi();
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  while (!Serial);
  Serial.println("LoRa Receiver");

  //setup LoRa transceiver module
  LoRa.setPins(ss, rst, dio0);
  
  //replace the LoRa.begin(---E-) argument with your location's frequency 
  //433E6 for Asia
  //866E6 for Europe
  //915E6 for North America
  while (!LoRa.begin(433E6)) {
    Serial.println(".");
    delay(500);
  }
   // Change sync word (0xF3) to match the receiver
  // The sync word assures you don't get LoRa messages from other LoRa transceivers
  // ranges from 0-0xFF
  LoRa.setSyncWord(0xF3);
  Serial.println("LoRa Initializing OK!");
  
  
}

int a = 1;
void loop() {
  ArduinoCloud.update();
  // Your code here
 
  
  
  
    // try to parse packet
  int packetSize = LoRa.parsePacket();
  
  if (packetSize) {
    // received a packet
    Serial.print("Received packet '");

    // read packet
    while (LoRa.available()) {
    
      String LoRaData = LoRa.readString();
      Serial.print(LoRaData); 
      String ctrlPassword =  LoRaData.substring(0,4);
      int intPassw = ctrlPassword.toInt();
      
       if (intPassw == passwordCo2){
        int data=LoRaData.toInt();
        if (data > 9999999){
          data = data - (passwordCo2*10000);
        }
        else{
          data = data - (passwordCo2*1000);
        }
        
        cO2=data;
        Serial.println("Co2:");
        Serial.print(cO2);
      }
      else if (intPassw == passwordTemp){
        int data=LoRaData.toInt();
        data = data - (passwordTemp*100);
        temperature=data;
        Serial.println("temp:");
        Serial.print(temperature);
      }
      else if (intPassw == passwordHum){
        int data=LoRaData.toInt();
        data = data - (passwordHum*100);
        humidity =data;
        Serial.println("humidity");
        Serial.print(humidity);
      }
      else {
        Serial.println("This message is not for me!");
      }
      
      
      
      

     delay(200);

     
    }
if ( cO2 >= 1400){
  
  fan = true;

}
else {
  fan = false;
}
    // print RSSI of packet
    Serial.print("' with RSSI ");
    Serial.println(LoRa.packetRssi());
    delay(1000);
    a = a + 1;
  }
  
  
  
  
  
}



/*
  Since Counter is READ_WRITE variable, onCounterChange() is
  executed every time a new value is received from IoT Cloud.
*/


void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin("TURKSAT-KABLONET-22CC-2.4G", "1b5f21e4");
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print("Wifi_Not Connected!");
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}





/*
  Since CO2PPM is READ_WRITE variable, onCO2PPMChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCO2Change()  {
  // Add your code here to act upon CO2PPM change
}




/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}


/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}


/*
  Since Fan is READ_WRITE variable, onFanChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanChange()  {
  // Add your code here to act upon Fan change
}









